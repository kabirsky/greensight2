{"version":3,"sources":["components/Search.js","components/Vacancy.js","components/Vacancies.js","components/ContactForm.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Search","className","required","onKeyPress","e","key","preventDefault","onSubmit","value","hidden","disabled","selected","htmlFor","type","id","name","placeholder","Vacancy","props","style","backgroundImage","company_logo","company","href","url","title","parse","description","Vacancies","useState","vacanciesJSON","setVacanciesJSON","vacancies","setVacancies","end","useEffect","a","fetch","response","json","jobs","console","log","temp","i","length","push","location","fetchJobs","slice","ContactForm","Footer","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7938134b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Search.css\";\r\n\r\nfunction Search() {\r\n  return (\r\n    <div className=\"search\">\r\n      <form className=\"form\">\r\n        <div className=\"search-form\">\r\n          <label className=\"search-form__label label\">Form</label>\r\n          <select\r\n            required\r\n            className=\"search-form__select\"\r\n            onKeyPress={(e) => {\r\n              e.key === \"Enter\" && e.preventDefault();\r\n            }}\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n            }}\r\n          >\r\n            <option\r\n              className=\"search-form__option placeholder\"\r\n              value=\"\"\r\n              hidden\r\n              disabled\r\n              selected\r\n            >\r\n              Not selected\r\n            </option>\r\n            <option className=\"search-form__option\">Full time</option>\r\n            <option className=\"search-form__option\">Half time</option>\r\n            <option className=\"search-form__option\">Part time</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"search-position\">\r\n          <label\r\n            className=\"search-position__label label\"\r\n            htmlFor=\"search-position__text\"\r\n          >\r\n            Position\r\n          </label>\r\n          <input\r\n            className=\"search-position__text text\"\r\n            type=\"text\"\r\n            id=\"search-position__text\"\r\n            name=\"position\"\r\n            placeholder=\"Unspecified\"\r\n            onKeyPress={(e) => {\r\n              e.key === \"Enter\" && e.preventDefault();\r\n            }}\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"search-btn\">\r\n          <input\r\n            className=\"search-btn__button btn\"\r\n            type=\"button\"\r\n            id=\"search-btn btn\"\r\n            value=\"Clear sorting\"\r\n          />\r\n          <label className=\"search-btn__cross\" htmlFor=\"search-btn btn\"></label>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport parse from \"html-react-parser\";\r\nimport \"../styles/Vacancy.css\";\r\n\r\nfunction Vacancy(props) {\r\n  return (\r\n    <div className=\"vacancy\">\r\n      <div className=\"info\">\r\n        <div\r\n          className=\"info-img-wrapper\"\r\n          style={{\r\n            backgroundImage: `url(${\r\n              props.company_logo === null\r\n                ? \"../img/No_image_available.svg\"\r\n                : props.company_logo\r\n            })`,\r\n          }}\r\n        ></div>\r\n        <div className=\"info-text-wrapper\">\r\n          <p className=\"info-text info-text__form\">\r\n            <span className=\"info-text__label\">Form: </span>\r\n            {props.type}\r\n          </p>\r\n          <p className=\"info-text info-text__company\">\r\n            <span className=\"info-text__label\">Company: </span>\r\n            {props.company}\r\n          </p>\r\n          <p className=\"info-text info-text__web\">\r\n            <span className=\"info-text__label\">Web: </span>\r\n            <a className=\"info-text__link\" href={props.url}>\r\n              {props.url}\r\n            </a>\r\n          </p>\r\n          <p className=\"info-text info-text__address\">\r\n            <span className=\"info-text__label\">Address: </span>\r\n            {props.type}\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"description\">\r\n        <h3 className=\"description__header\">{props.title}</h3>\r\n        <div className=\"description__text\">{parse(props.description)}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Vacancy;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Vacancy from \"./Vacancy\";\r\nimport TestVacancy from \"../test/TestVacancy\";\r\nimport JobApi from \"./JobApi\";\r\n\r\nimport \"../styles/Vacancies.css\";\r\n\r\nfunction Vacancies() {\r\n  let [vacanciesJSON, setVacanciesJSON] = useState([]);\r\n  let [vacancies, setVacancies] = useState([]);\r\n  let [end, setEnd] = useState(5);\r\n\r\n  // useEffect(() => {\r\n  //   if (vacanciesJSON === null) {\r\n  //     new JobApi().getJobs().then((data) => {\r\n  //       setVacanciesJSON([...data]);\r\n  //       console.log(vacanciesJSON);\r\n  //       let temp = [];\r\n  //       for (let i = 0; i < data[0].length; i++) {\r\n  //         temp.push(\r\n  //           <Vacancy\r\n  //             key={i}\r\n  //             company={data[0][i].company}\r\n  //             company_logo={data[0][i].company_logo}\r\n  //             type={data[0][i].type}\r\n  //             url={data[0][i].url}\r\n  //             location={data[0][i].location}\r\n  //             title={data[0][i].title}\r\n  //             description={data[0][i].description}\r\n  //           />\r\n  //         );\r\n  //       }\r\n  //       setVacancies(temp);\r\n  //       console.log(vacancies);\r\n  //     });\r\n  //   }\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchJobs = async () => {\r\n      const response = await fetch(\r\n        \"https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?search=frontend\"\r\n      );\r\n      const jobs = await response.json();\r\n      console.log(jobs);\r\n      setVacanciesJSON([...jobs]);\r\n      let temp = [];\r\n      for (let i = 0; i < jobs.length; i++) {\r\n        temp.push(\r\n          <Vacancy\r\n            key={i}\r\n            company={jobs[i].company}\r\n            company_logo={jobs[i].company_logo}\r\n            type={jobs[i].type}\r\n            url={jobs[i].url}\r\n            location={jobs[i].location}\r\n            title={jobs[i].title}\r\n            description={jobs[i].description}\r\n          />\r\n        );\r\n      }\r\n      setVacancies(temp);\r\n    };\r\n    fetchJobs();\r\n  }, []);\r\n\r\n  console.log(vacanciesJSON);\r\n  console.log(vacancies);\r\n\r\n  return (\r\n    <div className=\"vacancies\">\r\n      {/* <TestVacancy /> */}\r\n      {vacancies.slice(0, end)}\r\n      <div className=\"more-button\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Vacancies;\r\n","import React from \"react\";\r\n\r\nfunction ContactForm() {\r\n  return <div className=\"contact-form\"></div>;\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return <footer className=\"footer\"></footer>;\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Search from \"./components/Search\";\nimport Vacancies from \"./components/Vacancies\";\nimport ContactForm from \"./components/ContactForm\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h2 className=\"header\">List of vacancies</h2>\n        <Search />\n        <Vacancies />\n        <ContactForm />\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}